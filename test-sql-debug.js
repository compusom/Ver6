// Script temporal para probar la conexi√≥n SQL con diagn√≥stico detallado
// Uso: node test-sql-debug.js

import fetch from 'node-fetch';
import fs from 'fs';

async function testSqlConnection() {
    console.log('üîç Iniciando diagn√≥stico COMPLETO de conexi√≥n SQL...\n');
    
    // IMPORTANTE: Configura aqu√≠ tus credenciales reales de SQL Server
    const sqlConfig = {
        server: 'localhost',     // Cambia por tu servidor (ej: 'localhost', '127.0.0.1', 'DESKTOP-ABC123\\SQLEXPRESS')
        port: '1433',           // Cambia por tu puerto (normalmente 1433)
        database: 'test_db',    // Cambia por tu base de datos real
        user: 'sa',             // Cambia por tu usuario real
        password: 'password123' // Cambia por tu contrase√±a real
    };
    
    console.log('‚ö†Ô∏è  ANTES DE CONTINUAR:');
    console.log('   ‚Ä¢ Verifica que SQL Server est√© ejecut√°ndose');
    console.log('   ‚Ä¢ Confirma que las credenciales en este archivo sean correctas');  
    console.log('   ‚Ä¢ Aseg√∫rate de que la base de datos existe');
    console.log('');
    
    try {
        console.log('üì° Enviando petici√≥n de diagn√≥stico...');
        console.log('üîß Configuraci√≥n:', { 
            server: sqlConfig.server, 
            port: sqlConfig.port, 
            database: sqlConfig.database, 
            user: sqlConfig.user 
        });
        console.log('');
        
        const response = await fetch('http://localhost:3001/api/sql/debug-connect', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(sqlConfig)
        });
        
        const result = await response.json();
        
        console.log('üìã RESULTADO DEL DIAGN√ìSTICO COMPLETO');
        console.log('======================================\n');
        
        if (result.success) {
            console.log('‚úÖ CONEXI√ìN EXITOSA!');
            console.log(`üìä Tablas en base de datos: ${result.tablesCreated}`);
            if (result.statistics) {
                console.log(`üìà Estad√≠sticas:`, result.statistics);
            }
        } else {
            console.log('‚ùå ERROR EN CONEXI√ìN:', result.error);
        }
        
        console.log('\nüìä RESUMEN DE LOGS:');
        console.log('-------------------');
        if (result.summary) {
            console.log(`‚Ä¢ Total de logs: ${result.summary.totalLogs}`);
            console.log(`‚Ä¢ Errores: ${result.summary.errors}`);
            console.log(`‚Ä¢ Advertencias: ${result.summary.warnings}`);
            console.log(`‚Ä¢ Consultas SQL: ${result.summary.sqlQueries}`);
            console.log(`‚Ä¢ Duraci√≥n: ${result.summary.duration}ms`);
        }
        
        if (result.logFile) {
            console.log(`\nüìÑ Logs guardados en: ${result.logFile}`);
            console.log(`üìÑ Logs detallados en: sql-debug.log`);
            
            // Try to show the most critical errors
            try {
                const logContent = fs.readFileSync('sql-debug.log', 'utf8');
                const errorLines = logContent.split('\n').filter(line => 
                    line.includes('‚ùå') || line.includes('ERROR') || line.includes('CRITICAL')
                );
                
                if (errorLines.length > 0) {
                    console.log('\nüö® ERRORES CR√çTICOS ENCONTRADOS:');
                    console.log('================================');
                    errorLines.slice(0, 10).forEach((line, index) => {
                        console.log(`${index + 1}. ${line.trim()}`);
                    });
                    
                    if (errorLines.length > 10) {
                        console.log(`... y ${errorLines.length - 10} errores m√°s en el archivo de log`);
                    }
                }
            } catch (readError) {
                console.log('No se pudo leer el archivo de log para mostrar errores');
            }
        }
        
        console.log('\n' + '='.repeat(50));
        console.log('üîç AN√ÅLISIS COMPLETO TERMINADO');
        console.log('üìã Revisa los archivos de log para detalles completos');
        console.log('='.repeat(50));
        
    } catch (error) {
        console.error('üí• Error ejecutando diagn√≥stico:', error.message);
        console.log('\nüîß Verifica que:');
        console.log('‚Ä¢ El servidor est√© corriendo en http://localhost:3001');
        console.log('‚Ä¢ Las credenciales SQL en este script sean correctas');
        console.log('‚Ä¢ SQL Server est√© ejecut√°ndose y accesible');
    }
}

// Ejecutar diagn√≥stico
testSqlConnection();